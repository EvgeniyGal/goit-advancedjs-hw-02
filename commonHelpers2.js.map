{"version":3,"file":"commonHelpers2.js","sources":["../src/js/02-timer.js"],"sourcesContent":["import flatpickr from 'flatpickr';\nimport iziToast from 'izitoast';\nimport 'flatpickr/dist/flatpickr.min.css';\nimport 'izitoast/dist/css/iziToast.min.css';\n\nconst elements = {\n  input: document.querySelector('#datetime-picker'),\n  btn: document.querySelector('button[data-start]'),\n  daysField: document.querySelector('span[data-days]'),\n  hoursField: document.querySelector('span[data-hours]'),\n  minutesField: document.querySelector('span[data-minutes]'),\n  secondsField: document.querySelector('span[data-seconds]'),\n};\n\nlet selectedDatatime;\nlet intervalId;\n\nelements.btn.disabled = true;\n\nconst options = {\n  enableTime: true,\n  time_24hr: true,\n  defaultDate: new Date(),\n  minuteIncrement: 1,\n  onClose(selectedDates) {\n    if (new Date() > selectedDates[0]) {\n      iziToast.error({\n        title: 'Alert',\n        message: 'Please choose a date in the future',\n        position: 'center',\n      });\n      elements.btn.disabled = true;\n    } else {\n      selectedDatatime = selectedDates[0];\n      elements.btn.disabled = false;\n    }\n  },\n};\n\nflatpickr(elements.input, options);\n\nelements.btn.addEventListener('click', handlerClickStart);\n\nfunction handlerClickStart(ev) {\n  intervalId = setInterval(\n    () => setDataToTextfield(selectedDatatime.getTime() - new Date().getTime()),\n    1000\n  );\n  ev.target.disabled = true;\n}\n\nfunction setDataToTextfield(ms) {\n  if (ms > 0) {\n    const data = convertMs(ms);\n    elements.daysField.textContent = addLeadingZero(data.days);\n    elements.hoursField.textContent = addLeadingZero(data.hours);\n    elements.minutesField.textContent = addLeadingZero(data.minutes);\n    elements.secondsField.textContent = addLeadingZero(data.seconds);\n  } else {\n    clearInterval(intervalId);\n  }\n}\n\nfunction convertMs(ms) {\n  // Number of milliseconds per unit of time\n  const second = 1000;\n  const minute = second * 60;\n  const hour = minute * 60;\n  const day = hour * 24;\n\n  // Remaining days\n  const days = Math.floor(ms / day);\n  // Remaining hours\n  const hours = Math.floor((ms % day) / hour);\n  // Remaining minutes\n  const minutes = Math.floor(((ms % day) % hour) / minute);\n  // Remaining seconds\n  const seconds = Math.floor((((ms % day) % hour) % minute) / second);\n\n  return { days, hours, minutes, seconds };\n}\n\nfunction addLeadingZero(value) {\n  return ('' + value).padStart(2, 0);\n}\n"],"names":["elements","selectedDatatime","intervalId","options","selectedDates","iziToast","flatpickr","handlerClickStart","ev","setDataToTextfield","ms","data","convertMs","addLeadingZero","days","hours","minutes","seconds","value"],"mappings":"+IAKA,MAAMA,EAAW,CACf,MAAO,SAAS,cAAc,kBAAkB,EAChD,IAAK,SAAS,cAAc,oBAAoB,EAChD,UAAW,SAAS,cAAc,iBAAiB,EACnD,WAAY,SAAS,cAAc,kBAAkB,EACrD,aAAc,SAAS,cAAc,oBAAoB,EACzD,aAAc,SAAS,cAAc,oBAAoB,CAC3D,EAEA,IAAIC,EACAC,EAEJF,EAAS,IAAI,SAAW,GAExB,MAAMG,EAAU,CACd,WAAY,GACZ,UAAW,GACX,YAAa,IAAI,KACjB,gBAAiB,EACjB,QAAQC,EAAe,CACjB,IAAI,KAASA,EAAc,IAC7BC,EAAS,MAAM,CACb,MAAO,QACP,QAAS,qCACT,SAAU,QAClB,CAAO,EACDL,EAAS,IAAI,SAAW,KAExBC,EAAmBG,EAAc,GACjCJ,EAAS,IAAI,SAAW,GAE3B,CACH,EAEAM,EAAUN,EAAS,MAAOG,CAAO,EAEjCH,EAAS,IAAI,iBAAiB,QAASO,CAAiB,EAExD,SAASA,EAAkBC,EAAI,CAC7BN,EAAa,YACX,IAAMO,EAAmBR,EAAiB,QAAO,EAAK,IAAI,KAAI,EAAG,SAAS,EAC1E,GACJ,EACEO,EAAG,OAAO,SAAW,EACvB,CAEA,SAASC,EAAmBC,EAAI,CAC9B,GAAIA,EAAK,EAAG,CACV,MAAMC,EAAOC,EAAUF,CAAE,EACzBV,EAAS,UAAU,YAAca,EAAeF,EAAK,IAAI,EACzDX,EAAS,WAAW,YAAca,EAAeF,EAAK,KAAK,EAC3DX,EAAS,aAAa,YAAca,EAAeF,EAAK,OAAO,EAC/DX,EAAS,aAAa,YAAca,EAAeF,EAAK,OAAO,CACnE,MACI,cAAcT,CAAU,CAE5B,CAEA,SAASU,EAAUF,EAAI,CAQrB,MAAMI,EAAO,KAAK,MAAMJ,EAAK,KAAG,EAE1BK,EAAQ,KAAK,MAAOL,EAAK,MAAO,IAAI,EAEpCM,EAAU,KAAK,MAAQN,EAAK,MAAO,KAAQ,GAAM,EAEjDO,EAAU,KAAK,MAASP,EAAK,MAAO,KAAQ,IAAU,GAAM,EAElE,MAAO,CAAE,KAAAI,EAAM,MAAAC,EAAO,QAAAC,EAAS,QAAAC,CAAO,CACxC,CAEA,SAASJ,EAAeK,EAAO,CAC7B,OAAQ,GAAKA,GAAO,SAAS,EAAG,CAAC,CACnC"}